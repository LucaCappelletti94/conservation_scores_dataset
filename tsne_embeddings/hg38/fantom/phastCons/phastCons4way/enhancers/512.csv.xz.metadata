{
    "creation_time": 1630921161.5509636,
    "creation_time_human": "2021-09-06 09:39:21",
    "time_delta": 9.289093017578125,
    "time_delta_human": "9 seconds",
    "file_dump_time": 3.1806893348693848,
    "file_dump_time_human": "3 seconds",
    "file_dump_size": 1247064,
    "file_dump_size_human": "1.2 MB",
    "load_kwargs": {},
    "dump_kwargs": {},
    "function_name": "compute_embedding",
    "function_file": "<ipython-input-58-d00ea4fc59fc>:1",
    "args_to_ignore": [],
    "source": "@Cache(\n    cache_path=\"tsne_embeddings/{assembly}/{dataset}/{conservation_score}/{conservation_score_version}/{region}/{window_size}.csv.xz\"\n)\ndef compute_embedding(\n    assembly: str,\n    dataset: str,\n    conservation_score: str,\n    conservation_score_version: str,\n    region: str,\n    window_size: int\n):\n    # Retrieve the conservation scores\n    X_imputed = load_conservation_scores(\n        assembly=assembly,\n        dataset=dataset,\n        conservation_scores=conservation_score,\n        conservation_score_version=conservation_score_version,\n        region=region,\n        window_size=window_size,\n        imputed=True\n    )\n    # Identify rows with exclusively NaN values\n    all_nan_values_mask = X_imputed.isna().all(axis=1)\n    # Drop the rows with only NaN values\n    X_without_nan_rows = X_imputed[~all_nan_values_mask]\n    # Compute the TSNE embedding\n    tsne_embedding = pd.DataFrame(\n        TSNE().fit_transform(X_without_nan_rows.values),\n        index=X_without_nan_rows.index,\n        columns=[\"first_component\", \"second_component\"]\n    )\n    # Re-expand the indices to include NaN rows\n    expanded_tsne_embedding = pd.DataFrame(\n        np.nan,\n        index=X_imputed.index,\n        columns=tsne_embedding.columns\n    )\n    # Assign the values\n    expanded_tsne_embedding.loc[tsne_embedding.index] = tsne_embedding\n    # Return the computed embedding and the filtered labels\n    return expanded_tsne_embedding\n",
    "backend_metadata": {
        "type": "pandas",
        "columns_types": {
            "first_component": "float64",
            "second_component": "float64"
        },
        "index_type": "str",
        "columns_names_type": "str"
    },
    "parameters": {
        "assembly": "hg38",
        "dataset": "fantom",
        "conservation_score": "phastCons",
        "conservation_score_version": "phastCons4way",
        "region": "enhancers",
        "window_size": 512
    }
}